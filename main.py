import discord
from discord.ext import commands
import pymongo
from dotenv import load_dotenv
import os
from aiohttp import web
import asyncio
import logging
from handlers.image_drop_handler import handle_image_drop
from utils.import_characters import import_characters

# C·∫•u h√¨nh logging ƒë·ªÉ t·∫Øt log kh√¥ng mong mu·ªën
logging.basicConfig(level=logging.WARNING)  # Ch·ªâ hi·ªÉn th·ªã log t·ª´ WARNING tr·ªü l√™n
logging.getLogger('discord').setLevel(logging.WARNING)  # T·∫Øt log INFO t·ª´ discord.py
logging.getLogger('aiohttp').setLevel(logging.WARNING)  # T·∫Øt log INFO t·ª´ aiohttp
logging.getLogger('pymongo').setLevel(logging.WARNING)  # T·∫Øt log INFO t·ª´ pymongo
logging.getLogger('easyocr').setLevel(logging.WARNING)  # T·∫Øt log t·ª´ easyocr

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh bot
intents = discord.Intents.default()
intents.guilds = True
intents.messages = True
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

KARUTA_ID = 646937666251915264
bot_start_time = None

# K·∫øt n·ªëi MongoDB v·ªõi gi·ªõi h·∫°n s·ªë k·∫øt n·ªëi
mongo_client = pymongo.MongoClient(
    os.getenv('MONGO_URI'),
    maxPoolSize=5,  # Gi·ªõi h·∫°n s·ªë k·∫øt n·ªëi t·ªëi ƒëa
    connectTimeoutMS=30000,
    socketTimeoutMS=30000
)
db = mongo_client['wishlist_bot']

# HTTP server cho Render
async def health_check(request):
    return web.Response(text="ü§ñ Wishlist Bot (kd) is running!")

async def start_http_server():
    app = web.Application()
    app.add_routes([web.get('/', health_check)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv('PORT', 8080))  # L·∫•y PORT t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, m·∫∑c ƒë·ªãnh l√† 8080
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"üåê HTTP server is running on port {port}")

@bot.event
async def on_ready():
    global bot_start_time
    print(f'ü§ñ Bot online as {bot.user}')
    bot_start_time = discord.utils.utcnow()
    await import_characters(db)
    print('‚úÖ MongoDB connected and characters imported')

@bot.event
async def on_message(message):
    if message.author.bot and message.author.id == KARUTA_ID:
        if bot_start_time is not None:  # ƒê·∫£m b·∫£o bot_start_time ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
            await handle_image_drop(message, db, bot_start_time)
    await bot.process_commands(message)

# ƒê√≥ng k·∫øt n·ªëi MongoDB khi bot d·ª´ng
@bot.event
async def on_disconnect():
    mongo_client.close()
    print("MongoDB connection closed")

# Ch·∫°y bot v√† HTTP server
async def main():
    # Kh·ªüi ƒë·ªông HTTP server
    await start_http_server()
    # Ch·∫°y bot
    await bot.start(os.getenv('BOT_TOKEN'))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        mongo_client.close()
        print("Bot stopped, MongoDB connection closed")